#!/usr/bin/env python3

#########################
###   OLLINGRAPH 2D   ###
#########################

# Version 1.0:   Miguel January 2020.
# Contact:       malcubi@nucleares.unam.mx
#
# 1/3/21:        It now works with python 3.
#                Also fixed some bugs plotting multiple data files.


#######################
###   DESCRIPTION   ###
#######################

# This is a python package to plot simple surface plots and animations.
#
# The plots are quite simple, and meant for quick/dirty interactive
# visualization.  These plots are not supposed to be used for figures
# intended for publication (use gnuplot or something similar for that).
#
# The rendering is quite slow, so I initially start with rather low
# resolution ("stride"). But this can be adjusted.


###########################
###   IMPORT PACKAGES   ###
###########################

# Import math and plotting packages.

import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg,NavigationToolbar2Tk

import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

from matplotlib.widgets import Button

import numpy as np

# Import Tkinter GUI package.

import tkinter as tk
from tkinter.constants import *

# Import packages for 3D plots.

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

# Import shell calls package.

import subprocess

# Eliminate warnings.

import warnings
warnings.filterwarnings("ignore")


#############################################
###   GET NAME AND NUMBER OF DATA FILES   ###
#############################################

# Import command line arguments.

import sys
import getopt

# Find options.

opts, args = getopt.getopt(sys.argv[1:], "h",["title="])

plottitle = ''

for opt, arg in opts:
    if opt == '-h':
        print('ollingraph --title="plotname" <file1> <file2> ...')
        sys.exit()
    elif opt == '--title':
        plottitle = arg
        if plottitle == '':
            print('ollingraph: You must give a string after the argument --title')
            sys.exit()

# Get list of file names.

filen = []

# Copy commmand line arguments to "filen".
# Notice that filen[0] is actually the name of the
# script (ollingraph), while the data file names
# in fact start at filen[1].

if plottitle=='':
    filen = sys.argv
else:
    filen = sys.argv[1:]

# Find out total number of files.  It will be the
# length of "filen" minus 1.

nf = len(filen)-1

# Check if no file was given.

if nf==0:
    print('ollingraph: You must give at least one data file in the command line')
    sys.exit()


####################################
###  DECLARE GLOBAL DATA LISTS   ###
####################################

t = []   # List containing the time values for the different time steps.

ntime  = [0 for i in range(nf+1)]  # List with number of time steps for each file.
nxlist = [0 for i in range(nf+1)]  # List with number of points in x direction for each file.
nylist = [0 for i in range(nf+1)]  # List with number of points in y direction for each file.


#####################################################
###   COUNT NUMBER OF TIME STEPS AND READ TIMES   ###
#####################################################

# Count the number of time steps for the different files.
# Notice that if these are not evolution files then "ntime"
# will remain equal to zero (as declared above).

for i in range(1,nf+1):
    with open(filen[i]) as data:
        nt0 = 0
        for line in data:
            if ('time') in line.lower():
                nt0 = nt0 + 1
    ntime[i] = nt0
    #print(nt0)

# Find the maximum number of time steps among
# the different data files.

ntarr = np.array(ntime,int)
ntmax = np.amax(ntarr)

# Now find one of the files with the maximum number of
# time steps, and use it to define the time list t[].

if (ntmax>0):

    for i in range(1,nf+1):
        if ntime[i]==ntmax:
            j = i
            break

    with open(filen[j]) as data:
        for line in data:
            if ('time') in line.lower():
                s = line.split("=")
                t.append(round(float(s[1]),8))


#######################################
###   COUNT NUMBER OF GRID POINTS   ###
#######################################

# Count grid points in x direction.

for i in range(1,nf+1):
    with open(filen[i]) as data:
        nx = 0
        for line in data:
            if ('#' in line) or ('"' in line):
                continue
            elif (not line.isspace()):
                nx = nx + 1
            else:
                break
        nxlist[i] = nx

# Count grid points in y direction.

for i in range(1,nf+1):
    b_old = ""
    timeFlag = False
    with open(filen[i]) as data:
        ny = 0
        for line in data:
            if ('time') in line.lower():
                if timeFlag:
                    break
                else:
                    timeFlag = True
            elif ('#' in line) or ('"' in line):
                continue
            elif (not line.isspace()):
                a,b,c = line.split()
            elif (b != b_old):
                ny = ny + 1
                b_old = b
        nylist[i] = ny

nxmax = np.amax(nxlist)
nymax = np.amax(nylist)


##############################
###  DECLARE DATA ARRAYS   ###
##############################

xarr = np.zeros((nf,ntmax,nxmax,nymax))
yarr = np.zeros((nf,ntmax,nxmax,nymax))
zarr = np.zeros((nf,ntmax,nxmax,nymax))


#####################
###   READ DATA   ###
#####################

# Here we read the data for all data files.

for k in range(1,nf+1):
    with open(filen[k]) as data:
        i = 0; j = 0; l = 0;
        for line in data:
            if ('time') in line.lower():
               j = 0; l = l + 1
            elif ('#' in line) or ('"' in line):
                continue
            elif (not line.isspace()):
                a,b,c = line.split()
                xarr[k-1][l-1][i][j] = a
                yarr[k-1][l-1][i][j] = b
                zarr[k-1][l-1][i][j] = c
                i = i + 1
            else:
                i = 0; j = j + 1

# If not all data files are the same size,
# we need to fill the empty part of the smaller
# files with some data.  Here I just copy
# the last line.

for k in range(1,nf+1):
    for l in range(1,ntmax+1):
        for i in range(nxlist[k],nxmax):
            for j in range(0,nymax):
               xarr[k-1][l-1][i][j] = xarr[k-1][l-1][nxlist[k]-1][j]
               yarr[k-1][l-1][i][j] = yarr[k-1][l-1][nxlist[k]-1][j]
               zarr[k-1][l-1][i][j] = zarr[k-1][l-1][nxlist[k]-1][j]

for k in range(1,nf+1):
    for l in range(1,ntmax+1):
        for i in range(0,nxmax):
            for j in range(nylist[k],nymax):
               xarr[k-1][l-1][i][j] = xarr[k-1][l-1][i][nylist[k]-1]
               yarr[k-1][l-1][i][j] = yarr[k-1][l-1][i][nylist[k]-1]
               zarr[k-1][l-1][i][j] = zarr[k-1][l-1][i][nylist[k]-1]


##################################
###   FIX INITIAL AXIS SCALE   ###
##################################

# Find minimum and maximum values of (x,y,z) for all data files.

xmin0 = np.nanmin(xarr)
xmax0 = np.nanmax(xarr)

ymin0 = np.nanmin(yarr)
ymax0 = np.nanmax(yarr)

zmin0 = np.nanmin(zarr)
zmax0 = np.nanmax(zarr)

zmindata = zmin0
zmaxdata = zmax0

# Now we add some extra space on top and bottom of z axis.

zmed = 0.5*(zmin0+zmax0)

zb0 = zmed + 1.8*(zmin0-zmed)
zt0 = zmed + 1.8*(zmax0-zmed)

zmin0 = zb0
zmax0 = zt0

# Copy to (xmin,xmax,ymin,ymax,zmin,zmax).

xmin = xmin0
xmax = xmax0

ymin = ymin0
ymax = ymax0

zmin = zmin0
zmax = zmax0


###################################
###   CREATE MAIN PLOT WINDOW   ###
###################################

# Remove default toolbar.

plt.rcParams['toolbar'] = 'None'

# Fix default fontsize.

plt.rcParams['font.size'] = 12

# Create basic figure.

fig = plt.figure(figsize=(8.5,6))
ax = fig.add_subplot(111)

fig.canvas.manager.set_window_title('Ollingraph2D') 

# Set color list for multiple data files.
# Notice that there are 7 basic colors:
# (b=blue,r=red,g=green,c=cyan,m=magenta,y=yellow,k=black).
# I add another three (limegreen,darkorange,blueviolet)
# for a total of 10. If there are more files they will cycle.

col = ['b','r','g','c','m','y','k','limegreen','darkorange','blueviolet']

# Adjust margins.

plt.subplots_adjust(top=0.83,bottom=0.1,left=0.1,right=0.83)

fig.patch.set_facecolor('lightgray')

# Title.

if (plottitle!=''):
    fig.text(0.1,0.85,plottitle,fontsize=14)
elif (nf==1):
    fig.text(0.1,0.85,filen[1],fontsize=14)
else:
    fig.text(0.1,0.85,'Multiple data files',fontsize=14)

# Print information about number of time steps
# (only for evolution type files).

if (ntmax>0):
    fig.text(0.1,0.03,'Number of time steps  = %s' %ntmax,fontsize=12)

# Set 3d projection.

ax = plt.axes(projection='3d')
ax.set_title('surface plot');

# Set initial viewing angle.

ax.view_init(30,-60)


##################################################
###   INITIALIZE TIME STEP COUNTER AND FLAGS   ###
##################################################

# Initialize time step counter.

kinit = 0

# Initialize flags.

pauseFlag  = True     # Flag to indicate if pause button was pressed.
rewindFlag = False    # Flag to indicate if we need to rewind data files.
meshFlag   = False    # Flag to indicate if we are plotting a wiremesh.

axisFlag   = False    # Flag to indicate if "axis"  popoup window is active.
strideFlag = False    # Flag to indicate if "stride" popoup window is active.


####################################
###   DEFINE PLOTTING FUNCTION   ###
####################################

# Declare initial stride.

xstride0 = 5
ystride0 = 5

xstride = xstride0
ystride = ystride0

def plotdata(t):

    global surf,xstride,ystride,meshFlah

    ax.clear()

    ax.set_xlim(xmin,xmax)
    ax.set_ylim(ymin,ymax)
    ax.set_zlim(zmin,zmax)

    for i in range(0,nf):
        ax.contourf(xarr[i][t],yarr[i][t],zarr[i][t],50,zdir='z',vmin=zmindata,vmax=zmaxdata,offset=zmin,cmap=cm.coolwarm)

    for i in range(0,nf):
        if meshFlag:
            ax.plot_wireframe(xarr[i][t],yarr[i][t],zarr[i][t],rstride=xstride,cstride=ystride,color=col[i])
        else:
            ax.plot_surface(xarr[i][t],yarr[i][t],zarr[i][t],rstride=xstride,cstride=ystride,linewidth=0,vmin=zmindata,vmax=zmaxdata,cmap=cm.summer)

    plt.draw()

    return


#############################
###   PLOT INITIAL DATA   ###
#############################

# Print time for initial data (only for evolution type files).

if (ntmax>0):
    timetxt = fig.text(0.15,0.78,'time =%s'%t[0],ha='left',va='center',fontsize=12)

# Plot initial data.

plotdata(0)


####################################
###   DEFINE DIFFERENT ACTIONS   ###
####################################

# Define different actions for buttons.

class Actions:


    #######################
    ###   QUIT BUTTON   ###
    #######################
    
    def quit(self,event):

        global pauseFlag

        # In case we are in the middle of an animation,
        # make sure it stops.

        pauseFlag = True

        # Close main window (make sure to exit any running process).
        
        sys.exit()
        plt.close("all")


    ##################################
    ###   FIRST TIME STEP BUTTON   ###
    ##################################

    def first(self,event):
        
        # Declare global variables.

        global timetxt,pauseFlag,rewindFlag,kinit,surf

        # Set pauseFlag and rewindFlag to true.

        pauseFlag  = True
        rewindFlag = True

        # Reset time step counter.

        kinit = 0

        # Write current time (first time step).

        timetxt.remove()
        timetxt = fig.text(0.15,0.78,'time =%s'%t[0],ha='left',va='center',fontsize=12)

        # Plot first time step.

        plotdata(0)


    #################################
    ###   LAST TIME STEP BUTTON   ###
    #################################

    def last(self,event):

        # Declare global variables.

        global timetxt,pauseFlag,rewindFlag,kinit,surf

        # Reset time step counter.

        kinit = ntmax-1

        # Set pauseFlag and rewindFlag to true.

        pauseFlag  = True
        rewindFlag = True

        # Write current time (last time step).

        timetxt.remove()
        timetxt = fig.text(0.15,0.78,'time =%s'%t[ntmax-1],ha='left',va='center',fontsize=12)

        # Plot last time step.

        plotdata(kinit)


    ###############################
    ###   STEP FORWARD BUTTON   ###
    ###############################
    
    def stepf(self,event):

        # Declare global variables.

        global timetxt,pauseFlag,kinit,surf

        # Only step if pauseFlag=true.

        if pauseFlag:

            # If we are not at the last time step increase kinit.

            if (kinit<ntmax-1):
                kinit = kinit+1

            # Write current time.

            timetxt.remove()
            timetxt=fig.text(0.15,0.78,'time =%s'%t[kinit],ha='left',va='center',fontsize=12)

            # Plot current time step.

            plotdata(kinit)

        # If pauseFlag was false just set it to true.

        else:

            pauseFlag = True


    ################################
    ###   STEP BACKWARD BUTTON   ###
    ################################

    def stepb(self,event):

        # Declare global variables.

        global timetxt,pauseFlag,rewindFlag,kinit,surf

        # Only step if pauseFlag=true.

        if pauseFlag:

            # If we are not at the last time step increase kinit.

            if (kinit>0):
                rewindFlag = False
                kinit = kinit-1

            # Write current time.

            timetxt.remove()
            timetxt=fig.text(0.15,0.78,'time =%s'%t[kinit],ha='left',va='center',fontsize=12)

            # Plot current time step.

            plotdata(kinit)

        # If pauseFlag was false just set it to true.

        else:

            pauseFlag = True



    #######################
    ###   PLAY BUTTON   ###
    #######################

    def play(self,event):

        # Declare global variables.

        global timetxt,pauseFlag,rewindFlag,kinit,surf

        if rewindFlag:
            kinit = 0
            rewindFlag = False

        # If we were paused, then play.

        if pauseFlag:

            # Set pauseFlag to False.

            pauseFlag = False

            # Change legend on play/pause button to "Pause".

            bplay.label.set_text('Pause ||')

            # Loop over all time steps.

            if (kinit==ntmax-1):
                kinit = 0

            for k in range(kinit,ntmax):

                # If pause button was pressed set kinit=k,
                # reset pauseFlag, and break out loop.

                if pauseFlag:

                    # Check if we need to rewind.

                    if rewindFlag:
                        kinit = 0
                    else:
                        kinit = k-1

                    # Break out of loop.

                    break

                # Write current time.

                timetxt.remove()
                timetxt=fig.text(0.15,0.78,'time =%s'%t[k],ha='left',va='center',fontsize=12)

                # Plot current time step and pause for a short time.

                plotdata(k)

                plt.pause(0.01)

                # If we got here after the whole loop,
                # set pauseFlag and rewindFlag to True.

                if (k>=ntmax-1):
                    kinit = k
                    pauseFlag  = True
                    rewindFlag = True

        # If we were not paused, then pause.

        else:

            # Set pauseFlag to True.

            pauseFlag = True

        # Change legend on play/pause button back to "Play".

        bplay.label.set_text('Play >')


    ############################
    ###   AXIS POPUP WINDOW  ###
    ############################

    def axis(self,event):

        global axisFlag,kinit,popup_axis

        # Define function that changes axis.

        def apply(*args):

            global axisFlag,zmin,zmax

            # Get new axis ranges from input boxes.

            zmin = float(input_box[0].get())
            zmax = float(input_box[1].get())

            # Replot figure.

            plotdata(kinit)

            # Close popup window.

            axisFlag = False
            popup_axis.destroy()

        # Define function to close window.

        def back():
            global axisFlag
            axisFlag = False
            popup_axis.destroy()

        # On first time it is pressed create popup window.

        if not axisFlag:

            axisFlag = True

            # Create poup window.

            popup_axis = tk.Tk()
            popup_axis.title("Axis limits")

            # Catch kill window command.

            popup_axis.protocol('WM_DELETE_WINDOW',back)

            # Frame for entry boxes.

            frame1 = tk.Frame(popup_axis)
            frame1.grid(column=0,row=0)

            # Frame for 'apply' and 'back' buttons.

            frame2 = tk.Frame(popup_axis,relief=RIDGE,borderwidth=2)
            frame2.grid(column=0,row=1)

            # Define entry variables and boxes.

            input_box = [tk.StringVar(popup_axis) for i in range(2)]

            input_box[0].set(round(zmin,4))
            input_box[1].set(round(zmax,4))

            box_entry = [tk.Entry(frame1,width=15,textvariable=input_box[i]) for i in range(2)]
            box_entry[0].grid(column=2,row=0)
            box_entry[1].grid(column=2,row=1)

            # Plot text and create boxes.

            tk.Label(frame1,width=15,text="zmin").grid(column=1,row=0)
            tk.Label(frame1,width=15,text="zmax").grid(column=1,row=1)

            # Create 'apply' and 'back' buttons.

            tk.Button(frame2,width=15,text="Apply",command=apply).grid(column=1,row=0)
            tk.Button(frame2,width=15,text="Back",command=back).grid(column=2,row=0)

            # Put cursor on first box.

            box_entry[0].focus()


    ###############################
    ###   STRIDE POPUP WINDOW   ###
    ###############################

    def stride(self,event):

        global strideFlag,kinit,popoup_stride

        # Define function that changes strides.

        def apply(*args):

            global strideFlag,xstride,ystride

            xstride = int(input_box[0].get())
            ystride = int(input_box[1].get())

            # Replot figure.

            plotdata(kinit)

            # Close popup window.

            strideFlag = False
            popup_stride.destroy()

        # Define function to close window.

        def back():
            global strideFlag
            strideFlag = False
            popup_stride.destroy()

        # On first time it is pressed create popup window.

        if not strideFlag:

            strideFlag = True

            # Create poup window.

            popup_stride = tk.Tk()
            popup_stride.title("Stride")

            # Catch kill window command.

            popup_stride.protocol('WM_DELETE_WINDOW',back)

            # Frame for entry boxes.

            frame1 = tk.Frame(popup_stride)
            frame1.grid(column=0,row=0)

            # Frame for 'apply' and 'back' buttons.

            frame2 = tk.Frame(popup_stride,relief=RIDGE,borderwidth=2)
            frame2.grid(column=0,row=1)

            # Define entry variables and boxes.

            input_box = [tk.StringVar(popup_stride) for i in range(2)]

            input_box[0].set(xstride)
            input_box[1].set(ystride)

            box_entry = [tk.Entry(frame1,width=15,textvariable=input_box[i]) for i in range(2)]
            box_entry[0].grid(column=2,row=0)
            box_entry[1].grid(column=2,row=1)

            # Plot text and create boxes.

            tk.Label(frame1,width=15,text="xstride").grid(column=1,row=0)
            tk.Label(frame1,width=15,text="ystride").grid(column=1,row=1)

            # Create 'apply' and 'back' buttons.

            tk.Button(frame2,width=15,text="Apply",command=apply).grid(column=1,row=0)
            tk.Button(frame2,width=15,text="Back" ,command=back ).grid(column=2,row=0)

            # Put cursor on first box.

            box_entry[0].focus()


    #############################
    ###   MESH POPUP WINDOW   ###
    #############################

    def mesh(self,event):

        global meshFlag,kinit,popoup_mesh

        # If wiremesh=true, go back to surface.

        if meshFlag:

            meshFlag = False

            # Change legend on button to "Wiremesh".

            bmesh.label.set_text('Wiremesh')

            # Plot current time step.

            plotdata(kinit)

        # If wiremesh=false, change from surface to wiremesh

        else:

            meshFlag = True

            # Change legend on button to "Surface".

            bmesh.label.set_text('Surface')

            # Plot current time step.

            plotdata(kinit)


#######################################
###   CALLBACK FOR EVENT HANDLING   ###
#######################################

callback = Actions()


######################################
###   DEFINE MAIN WINDOW BUTTONS   ###
######################################

# General buttons for all type of files.

axquit   = plt.axes([0.86,0.91,0.12,0.07])
bquit    = Button(axquit,'Quit',color='red',hovercolor='lightcoral')
bquit.on_clicked(callback.quit)

axaxis   = plt.axes([0.86,0.76,0.12,0.07])
baxis    = Button(axaxis,'Axis',color='gold',hovercolor='lightyellow')
baxis.on_clicked(callback.axis)

axstride = plt.axes([0.86,0.66,0.12,0.07])
bstride  = Button(axstride,'Stride',color='gold',hovercolor='lightyellow')
bstride.on_clicked(callback.stride)

axmesh   = plt.axes([0.86,0.56,0.12,0.07])
bmesh    = Button(axmesh,'Wiremesh',color='gold',hovercolor='lightyellow')
bmesh.on_clicked(callback.mesh)

# The following buttons are only for evolution type files.

if (ntmax>0):

    axfirst = plt.axes([0.05,0.91,0.1,0.07])
    bfirst  = Button(axfirst,'<< Start',color='limegreen',hovercolor='lightgreen')
    bfirst.on_clicked(callback.first)

    axstepb = plt.axes([0.15,0.91,0.1,0.07])
    bstepb  = Button(axstepb,'< Step',color='limegreen',hovercolor='lightgreen')
    bstepb.on_clicked(callback.stepb)

    axplay = plt.axes([0.25,0.91,0.1,0.07])
    bplay  = Button(axplay,'Play >',color='limegreen',hovercolor='lightgreen')
    bplay.on_clicked(callback.play)

    axstepf = plt.axes([0.35,0.91,0.1,0.07])
    bstepf  = Button(axstepf,'Step >',color='limegreen',hovercolor='lightgreen')
    bstepf.on_clicked(callback.stepf)

    axlast = plt.axes([0.45,0.91,0.1,0.07])
    blast  = Button(axlast,'End >>',color='limegreen',hovercolor='lightgreen')
    blast.on_clicked(callback.last)


#####################
###   SHOW PLOT   ###
#####################

plt.show()
